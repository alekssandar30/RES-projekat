///////////////////////////////////////////////////////////
//  DumpingBuffer.cs
//  Implementation of the Class DumpingBuffer
//  Generated by Enterprise Architect
//  Created on:      08-May-2019 2:32:35 PM
//  Original author: sale
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using KesMemorija.DumpingBuffer;
using System.Threading;

public class DumpingBuffer
{

    private HistoricalConverter historicalConv;        //konverter izmedju dumping buffera i history-a
    private Dictionary<int, CollectionDescription> cdDic;                    //ovde cuva DumpingBuffer
    DumpingBufferConverter dbc;          //njega pozivam kada mi dodje neki podatak da prepakuje
    DeltaCD deltaCD;
    int brojac_vrednosti = 0;

    public DeltaCD DeltaCD { get => deltaCD; set => deltaCD = value; }
    public Dictionary<int, CollectionDescription> CdDic { get => cdDic; set => cdDic = value; }

    public DumpingBuffer()
    {
        CdDic = new Dictionary<int, CollectionDescription>();
        historicalConv = new HistoricalConverter();
        dbc = new DumpingBufferConverter();
        DeltaCD = new DeltaCD();
        for (int i = 0; i < 5; i++)
        {
            CdDic.Add(i, new CollectionDescription(i));
            CdDic[i].Dataset = i;   //nepotrena linija koda, al videcemo
        }
    }

    ~DumpingBuffer()
    {

    }
    public void SendToHistoricalConverter(CollectionDescription cd, string type, int dataset)
    {
        if (cd == null)
            throw new ArgumentNullException("Prosledjeni argumenti ne smeju imati vrednost null");
        if (dataset < 0 || dataset > 4)
            throw new ArgumentException("Prosledjeni dataset mora da bude u granicama 1-5.");
        if (type != "ADD" && type != "UPDATE" && type != "REMOVE")
            throw new ArgumentException("Prosledjeni CollectionDescription mora biti smesten u ADD, UPDATE ili REMOVE DeltaCD Collection Description\n");

        FillDeltaCD(DeltaCD, type, cd, dataset);
        if (brojac_vrednosti >=2)
        {
            brojac_vrednosti = 0;
            if (CheckDeltaCD(DeltaCD))
            {
                historicalConv.ReadFromDumpingBuffer(DeltaCD);
                //ClearDeltaCD(DeltaCD);
                ClearDumpingBuffer();
                using (var mutex = new Mutex(false, "All_Process_Mutex"))
                {
                    mutex.WaitOne();
                    File.AppendAllText("Logfile.txt", "Dumping Buffer is sending DeltaCD structure to Historical Converter component");
                    mutex.ReleaseMutex();
                }
            }
            else
                return;
        }
    }
    public void ReadFromWritter(bool directly, string code, Value value, bool remove)
    {
        if (value == null)
            throw new ArgumentNullException("Prosledjeni argument value ne sme imati vrednost null");
        if (value.IDGeoPolozaja == null)
            throw new ArgumentNullException("Prosledjeni ID geografskog polozaja ne sme imati null vrednost");
        if (code == null)
            throw new ArgumentNullException("Prosledjeni code ne sme imati null vrednost");

        switch (code)
        {
            case "CODE_ANALOG": DumpingBufferDicFill(directly, value, remove, 0, "CODE_ANALOG"); break;
            case "CODE_DIGITAL": DumpingBufferDicFill(directly, value, remove, 0, "CODE_DIGITAL"); break;
            case "CODE_CUSTOM": DumpingBufferDicFill(directly, value, remove, 1, "CODE_CUSTOM"); break;
            case "CODE_LIMITSET": DumpingBufferDicFill(directly, value, remove, 1, "CODE_LIMITSET"); break;
            case "CODE_SINGLENODE": DumpingBufferDicFill(directly, value, remove, 2, "CODE_SINGLENODE"); break;
            case "CODE_MULTIPLENODE": DumpingBufferDicFill(directly, value, remove, 2, "CODE_MULTIPLENODE"); break;
            case "CODE_CONSUMER": DumpingBufferDicFill(directly, value, remove, 3, "CODE_CONSUMER"); break;
            case "CODE_SOURCE": DumpingBufferDicFill(directly, value, remove, 3, "CODE_SOURCE"); break;
            case "CODE_MOTION": DumpingBufferDicFill(directly, value, remove, 4, "CODE_MOTION"); break;
            case "CODE_SENSOR": DumpingBufferDicFill(directly, value, remove, 4, "CODE_SENSOR"); break;
            default: throw new ArgumentException("Prosledjeni code ne postoji");
        }
    }
    public void DumpingBufferDicFill(bool directly, Value value, bool remove, int dataset, string code)
    {
        if (value == null)
            throw new ArgumentNullException("Value ne sme imati vrednost null.");
        if (dataset < 0 || dataset > 4)
            throw new ArgumentException("Dataset vrednost mora biti izmedju 1 i 5.");
        if (code == null || code == "")
            throw new ArgumentException("Nepostojeca vrednost code-a.");

        if(directly)
        {
            historicalConv.ReadDirectlyFromDB(code, value);
            return;
        }
        dbc.AddCDtoDictionary(code, value, CdDic, dataset);
        brojac_vrednosti++;
        using (var mutex = new Mutex(false, "All_Process_Mutex"))
        {
            mutex.WaitOne();
            File.AppendAllText("Logfile.txt", "Dumping Buffer is writing " + code + " data to Dumping Buffer Converter" + Environment.NewLine);
            mutex.ReleaseMutex();
        }

        if (CheckDatasetValues(dataset))   //proveravam da li dati dataset ima obe vrednosti postavljene
        {
                if(remove)
                    SendToHistoricalConverter(CdDic[dataset], "REMOVE", dataset);
                else if (historicalConv.DatasetAlreadyExist(dataset))
                    SendToHistoricalConverter(CdDic[dataset], "UPDATE", dataset);
                else
                    SendToHistoricalConverter(CdDic[dataset], "ADD", dataset);
        }
        else
        {
            return;
        }

    }
    public bool CheckDatasetValues(int dataset)
    {
        if (dataset < 0 || dataset > 4)
            return false;

        return (CdDic[dataset].Dpc.dumpingPropertyList[0].DumpingValue != null && CdDic[dataset].Dpc.dumpingPropertyList[1].DumpingValue != null);
    }
    public void FillDeltaCD(DeltaCD dCD, string type, CollectionDescription cd, int dataset)
    {
        if (dCD == null || cd == null)
            throw new ArgumentNullException("Prosledjeni argumenti ne smeju imati vrednost null.");
        if (dataset < 0 || dataset > 4)
            throw new ArgumentException("Prosledjeni dataset mora biti u intervalu 1-5.");
        if (type != "ADD" && type != "UPDATE" && type != "REMOVE")
            throw new ArgumentException("Prosledjeni argumenti moraju da se proslede DeltaCD strukturi u jednu od njene 3 CollectonDescription strukture");


        switch (type)
        {
            case "ADD":
                {
                    DeltaCD.AddDic[dataset].Dataset = dataset;
                    DeltaCD.AddDic[dataset].ID = cd.ID;
                    for(int i=0;i<5;i++)
                    {
                        if (cd.Dpc.dumpingPropertyList[0].Code != null)
                        {
                            DeltaCD.AddDic[dataset].Dpc.dumpingPropertyList[0].Code = cd.Dpc.dumpingPropertyList[0].Code;
                            DeltaCD.AddDic[dataset].Dpc.dumpingPropertyList[1].Code = cd.Dpc.dumpingPropertyList[1].Code;

                            DeltaCD.AddDic[dataset].Dpc.dumpingPropertyList[0].DumpingValue = new Value();
                            DeltaCD.AddDic[dataset].Dpc.dumpingPropertyList[1].DumpingValue = new Value();
                            DeltaCD.AddDic[dataset].Dpc.dumpingPropertyList[0].DumpingValue.IDGeoPolozaja = cd.Dpc.dumpingPropertyList[0].DumpingValue.IDGeoPolozaja;
                            DeltaCD.AddDic[dataset].Dpc.dumpingPropertyList[0].DumpingValue.Potrosnja = cd.Dpc.dumpingPropertyList[0].DumpingValue.Potrosnja;
                            DeltaCD.AddDic[dataset].Dpc.dumpingPropertyList[0].DumpingValue.Timestamp = cd.Dpc.dumpingPropertyList[0].DumpingValue.Timestamp;
                            DeltaCD.AddDic[dataset].Dpc.dumpingPropertyList[1].DumpingValue.IDGeoPolozaja = cd.Dpc.dumpingPropertyList[1].DumpingValue.IDGeoPolozaja;
                            DeltaCD.AddDic[dataset].Dpc.dumpingPropertyList[1].DumpingValue.Potrosnja = cd.Dpc.dumpingPropertyList[1].DumpingValue.Potrosnja;
                            DeltaCD.AddDic[dataset].Dpc.dumpingPropertyList[1].DumpingValue.Timestamp = cd.Dpc.dumpingPropertyList[1].DumpingValue.Timestamp;
                        }
                    }
                }; break;
            case "UPDATE":
                {
                    DeltaCD.UpdateDic[dataset].Dataset = dataset;
                    DeltaCD.UpdateDic[dataset].ID = cd.ID;
                    for (int i = 0; i < 5; i++)
                    {
                        if (cd.Dpc.dumpingPropertyList[0].Code != null)
                        {
                            DeltaCD.UpdateDic[dataset].Dpc.dumpingPropertyList[0].Code = cd.Dpc.dumpingPropertyList[0].Code;
                            DeltaCD.UpdateDic[dataset].Dpc.dumpingPropertyList[1].Code = cd.Dpc.dumpingPropertyList[1].Code;

                            DeltaCD.UpdateDic[dataset].Dpc.dumpingPropertyList[0].DumpingValue = new Value();
                            DeltaCD.UpdateDic[dataset].Dpc.dumpingPropertyList[1].DumpingValue = new Value();

                            DeltaCD.UpdateDic[dataset].Dpc.dumpingPropertyList[0].DumpingValue.IDGeoPolozaja = cd.Dpc.dumpingPropertyList[0].DumpingValue.IDGeoPolozaja;
                            DeltaCD.UpdateDic[dataset].Dpc.dumpingPropertyList[0].DumpingValue.Potrosnja = cd.Dpc.dumpingPropertyList[0].DumpingValue.Potrosnja;
                            DeltaCD.UpdateDic[dataset].Dpc.dumpingPropertyList[0].DumpingValue.Timestamp = cd.Dpc.dumpingPropertyList[0].DumpingValue.Timestamp;
                            DeltaCD.UpdateDic[dataset].Dpc.dumpingPropertyList[1].DumpingValue.IDGeoPolozaja = cd.Dpc.dumpingPropertyList[1].DumpingValue.IDGeoPolozaja;
                            DeltaCD.UpdateDic[dataset].Dpc.dumpingPropertyList[1].DumpingValue.Potrosnja = cd.Dpc.dumpingPropertyList[1].DumpingValue.Potrosnja;
                            DeltaCD.UpdateDic[dataset].Dpc.dumpingPropertyList[1].DumpingValue.Timestamp = cd.Dpc.dumpingPropertyList[1].DumpingValue.Timestamp;
                        }
                    }
                }
                break;
            case "REMOVE":
                {
                    DeltaCD.RemoveDic[dataset].Dataset = cd.Dataset;
                    DeltaCD.RemoveDic[dataset].ID = cd.ID;
                    for (int i = 0; i < 5; i++)
                    {
                        if (cd.Dpc.dumpingPropertyList[0].Code != null)
                        {
                            DeltaCD.RemoveDic[dataset].Dpc.dumpingPropertyList[0].Code = cd.Dpc.dumpingPropertyList[0].Code;
                            DeltaCD.RemoveDic[dataset].Dpc.dumpingPropertyList[1].Code = cd.Dpc.dumpingPropertyList[1].Code;

                            DeltaCD.RemoveDic[dataset].Dpc.dumpingPropertyList[0].DumpingValue = new Value();
                            DeltaCD.RemoveDic[dataset].Dpc.dumpingPropertyList[1].DumpingValue = new Value();

                            DeltaCD.RemoveDic[dataset].Dpc.dumpingPropertyList[0].DumpingValue.IDGeoPolozaja = cd.Dpc.dumpingPropertyList[0].DumpingValue.IDGeoPolozaja;
                            DeltaCD.RemoveDic[dataset].Dpc.dumpingPropertyList[0].DumpingValue.Potrosnja = cd.Dpc.dumpingPropertyList[0].DumpingValue.Potrosnja;
                            DeltaCD.RemoveDic[dataset].Dpc.dumpingPropertyList[0].DumpingValue.Timestamp = cd.Dpc.dumpingPropertyList[0].DumpingValue.Timestamp;
                            DeltaCD.RemoveDic[dataset].Dpc.dumpingPropertyList[1].DumpingValue.IDGeoPolozaja = cd.Dpc.dumpingPropertyList[1].DumpingValue.IDGeoPolozaja;
                            DeltaCD.RemoveDic[dataset].Dpc.dumpingPropertyList[1].DumpingValue.Potrosnja = cd.Dpc.dumpingPropertyList[1].DumpingValue.Potrosnja;
                            DeltaCD.RemoveDic[dataset].Dpc.dumpingPropertyList[1].DumpingValue.Timestamp = cd.Dpc.dumpingPropertyList[1].DumpingValue.Timestamp;
                        }
                    }
                }
                break;
        }
    }
    public bool CheckDeltaCD(DeltaCD dCD)
    {
        if (dCD == null)
            return false;

        for(int i = 0; i < 5; i++)
        {
            if (dCD.AddDic[i].Dpc.dumpingPropertyList[0].Code != null && dCD.AddDic[i].Dpc.dumpingPropertyList[1].Code != null)
                return true;

            if (dCD.UpdateDic[i].Dpc.dumpingPropertyList[0].Code != null && dCD.UpdateDic[i].Dpc.dumpingPropertyList[1].Code != null)
                return true;
        }

        return false;
    }
    public void ClearDumpingBuffer()
    {
        for(int i=0;i<5;i++)
        {
            CdDic[i].Dpc.dumpingPropertyList[0].Code = null;
            CdDic[i].Dpc.dumpingPropertyList[1].Code = null;
            CdDic[i].Dpc.dumpingPropertyList[0].DumpingValue = null;
            CdDic[i].Dpc.dumpingPropertyList[1].DumpingValue = null;
        }
        
    }


















}//end DumpingBuffer