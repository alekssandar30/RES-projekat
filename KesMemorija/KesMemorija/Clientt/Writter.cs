///////////////////////////////////////////////////////////
//  Writter.cs
//  Implementation of the Class Writter
//  Generated by Enterprise Architect
//  Created on:      08-May-2019 2:32:36 PM
//  Original author: sale
///////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System.Data.Entity.Infrastructure;

public class Writter : IClient
{

    public DumpingBuffer m_DumpingBuffer;
    Value value = new Value();
    public enum Codes
    {
        CODE_ANALOG, CODE_DIGITAL, CODE_CUSTOM, CODE_LIMITSET,
        CODE_SINGLENODE, CODE_MULTIPLENODE, CODE_CONSUMER,
        CODE_SOURCE, CODE_MOTION, CODE_SENSOR
    }

    public Writter()
    {
        m_DumpingBuffer = new DumpingBuffer();
     
    }

	~Writter(){

	}

	
	public void ManualWriteToHistory(string code, Value value){

        
        m_DumpingBuffer.ReadFromWritter(true, code, value, false);

        using (var mutex = new Mutex(false, "All_Process_Mutex"))
        {
            mutex.WaitOne();
            File.AppendAllText("Logfile.txt", $"Writer is writing {code} directly to the Historical...\n");
            mutex.ReleaseMutex();
        }
    }

	
	public void WriteToDumpingBuffer(string code, Value value, bool bflag){
        
        
        m_DumpingBuffer.ReadFromWritter(false, code, value, bflag);

        using(var mutex = new Mutex(false, "All_Process_Mutex"))
        {
            mutex.WaitOne();
            File.AppendAllText("Logfile.txt", $"Writer is writing {code} to the dumping buffer...\n");
            mutex.ReleaseMutex();
        }
	}

	public void ReadDataFromFile()
    {  //ovde ce citati iz Data.txt na svake 2 sekunde i slati dumping bufferu
        string filePath = "InputData.txt";
        string line = "";
        string code = "";

        using(StreamReader sr = new StreamReader(filePath))
        {
            while(sr.ReadLine() != null)
            {
                line = sr.ReadLine(); //this line looks like: 
                                                 //[CODE_SINGLENODE 3627 3 01/01/0001 00:00:00]
                string[] lineParts = new string[line.Length];
                lineParts = line.Split(' ');
                code = lineParts[0].Substring(1);
                value.IDGeoPolozaja = lineParts[1];
                value.Potrosnja = Convert.ToDouble(lineParts[2]);
                //value.Timestamp = Convert.ToDateTime(lineParts[3]);
                value.Timestamp = DateTime.Now;
                m_DumpingBuffer.ReadFromWritter(false, code, value, false);
                Thread.Sleep(2000);
            }
            
            //sr.Close();

        }

     
        
	}

    



    
}//end Writter