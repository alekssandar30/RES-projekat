///////////////////////////////////////////////////////////
//  DumpingBuffer.cs
//  Implementation of the Class DumpingBuffer
//  Generated by Enterprise Architect
//  Created on:      08-May-2019 2:32:35 PM
//  Original author: sale
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using KesMemorija.DumpingBuffer;
using System.Threading;

public class DumpingBuffer
{

    private HistoricalConverter historicalConv = new HistoricalConverter();        //konverter izmedju dumping buffera i history-a
    private Dictionary<int, CollectionDescription> cdDic; //ovde cuva DumpingBuffer
    DumpingBufferConverter dbc = new DumpingBufferConverter();          //njega pozivam kada mi dodje neki podatak da prepakuje
    DeltaCD deltaCD = new DeltaCD();
    int brojac_vrednosti = 0;
    EventWaitHandle ewh = new EventWaitHandle(true, EventResetMode.AutoReset, "LOGFILE_PROCESI");

    public DumpingBuffer()
    {
        cdDic = new Dictionary<int, CollectionDescription>();
        for (int i = 0; i < 5; i++)
        {
            cdDic.Add(i, new CollectionDescription(i));
            cdDic[i].Dataset = i;   //nepotrena linija koda, al videcemo
        }
    }

    ~DumpingBuffer()
    {

    }
    public void SendToHistoricalConverter(CollectionDescription cd, string type, int dataset)
    {
        brojac_vrednosti++;

        if (cd == null || type == null)
            throw new ArgumentNullException("Prosledjeni argumenti ne smeju imati vrednost null");
        if (dataset < 0 || dataset > 4)
            throw new ArgumentException("Prosledjeni dataset mora da bude u granicama 1-5.");
        if (type != "ADD" && type != "UPDATE" && type != "REMOVE")
            throw new ArgumentException("Prosledjeni CollectionDescription mora biti smesten u ADD, UPDATE ili REMOVE DeltaCD Collection Description");


        FillDeltaCD(deltaCD, type, cd, dataset);
        if (brojac_vrednosti == 1)     //VRATI NA 10
        {
            brojac_vrednosti = 0;
            if (deltaCD.AddDic != null || deltaCD.UpdateDic != null || deltaCD.RemoveDic != null)
            {
                historicalConv.ReadFromDumpingBuffer(deltaCD);
                ClearDeltaCD(deltaCD);
                ewh.WaitOne();
                StreamWriter sw = new StreamWriter("Logfile.txt");
                sw.WriteLine("Dumping buffer is sending data to Historical Converter");
                sw.Close();
                ewh.Set();
            }
            else
                return;
        }
    }
    public void ReadFromWritter(bool directly, string code, Value value)
    {
        if (value == null)
            throw new ArgumentNullException("Prosledjeni argument value ne sme imati vrednost null");
        if (value.IDGeoPolozaja == null)
            throw new ArgumentNullException("Prosledjeni ID geografskog polozaja ne sme imati null vrednost");
        if (code == null)
            throw new ArgumentNullException("Prosledjeni code ne sme imati null vrednost");

        switch (code)
        {
            case "CODE_ANALOG": Code_Analog_Method(directly, value); break;
            case "CODE_DIGITAL": Code_Digital_Method(directly, value); break;
            case "CODE_CUSTOM": Code_Custom_Method(directly, value); break;
            case "CODE_LIMITSET": Code_Limitset_Method(directly, value); break;
            case "CODE_SINGLENODE": Code_Singlenode_Method(directly, value); break;
            case "CODE_MULTIPLENODE": Code_Multiplenode_Method(directly, value); break;
            case "CODE_CONSUMER": Code_Consumer_Method(directly, value); break;
            case "CODE_SOURCE ": Code_Source_Method(directly, value); break;
            case "CODE_MOTION": Code_Motion_Method(directly, value); break;
            case "CODE_SENSOR": Code_Sensor_Method(directly, value); break;
            default: throw new ArgumentException("Prosledjeni code ne postoji");
        }
    }
    public void Code_Analog_Method(bool directly, Value value)
    {
        dbc.AddCDtoDictionary("CODE_ANALOG", value, cdDic, 0);
        using (var mutex = new Mutex(false, "All_Process_Mutex"))
        {
            mutex.WaitOne();
            File.AppendAllText("Logfile.txt",  "Dumping Buffer is writing Code Analog data to Dumping Buffer Converter");
            mutex.ReleaseMutex();
        }
        /*
        ewh.WaitOne();
        StreamWriter sw = new StreamWriter("Logfile.txt");
        sw.WriteLine("Dumping Buffer is Code Analog data to Dumping Buffer Converter");
        ewh.Set();
        */
        if (CheckDatasetValues(0))   //proveravam da li dati dataset ima obe vrednosti postavljene
        {
            if (!directly)
            {
                string salji = "";

                if (historicalConv.DatasetAlreadyExist(0))
                    salji = "UPDATE";
                else
                    salji = "ADD";

                SendToHistoricalConverter(cdDic[0], salji, 0);
                cdDic[0].Dpc.dumpingPropertyList[0] = null;
                cdDic[0].Dpc.dumpingPropertyList[1] = null;
            }
        }
        else
        {
            return;
        }

    }
    public void Code_Digital_Method(bool directly, Value value)
    {
        dbc.AddCDtoDictionary("CODE_DIGITAL", value, cdDic, 0);
        using (var mutex = new Mutex(false, "All_Process_Mutex"))
        {
            mutex.WaitOne();
            File.AppendAllText("Logfile.txt", "Dumping Buffer is writing Code Digital data to Dumping Buffer Converter");
            mutex.ReleaseMutex();
        }
        if (CheckDatasetValues(0))   //proveravam da li dati dataset ima obe vrednosti postavljene
        {
            if (!directly)
            {
                string salji = "";

                if (historicalConv.DatasetAlreadyExist(0))
                    salji = "UPDATE";
                else
                    salji = "ADD";

                SendToHistoricalConverter(cdDic[0], salji, 0);
                cdDic[0].Dpc.dumpingPropertyList[0].DumpingValue = null;
                cdDic[0].Dpc.dumpingPropertyList[1].DumpingValue = null;
            }
        }
        else
        {
            return;
        }

    }
    public void Code_Custom_Method(bool directly, Value value)
    {
        dbc.AddCDtoDictionary("CODE_CUSTOM", value, cdDic, 1);
        //StreamWriter sw = new StreamWriter("Logfile.txt");
        //sw.WriteLine("Dumping Buffer is Code Custom data to Dumping Buffer Converter");
        if (CheckDatasetValues(1))   //proveravam da li dati dataset ima obe vrednosti postavljene
        {
            if (!directly)
            {
                string salji = "";

                if (historicalConv.DatasetAlreadyExist(1))
                    salji = "UPDATE";
                else
                    salji = "ADD";

                SendToHistoricalConverter(cdDic[1], salji, 1);
                cdDic[1].Dpc.dumpingPropertyList[0].DumpingValue = null;
                cdDic[1].Dpc.dumpingPropertyList[1].DumpingValue = null;
            }
        }
        else
        {
            return;
        }

    }
    public void Code_Limitset_Method(bool directly, Value value)
    {
        dbc.AddCDtoDictionary("CODE_LIMITSET", value, cdDic, 1);
        //StreamWriter sw = new StreamWriter("Logfile.txt");
        //sw.WriteLine("Dumping Buffer is Code Limitset data to Dumping Buffer Converter");
        if (CheckDatasetValues(1))   //proveravam da li dati dataset ima obe vrednosti postavljene
        {
            if (!directly)
            {
                string salji = "";

                if (historicalConv.DatasetAlreadyExist(1))
                    salji = "UPDATE";
                else
                    salji = "ADD";

                SendToHistoricalConverter(cdDic[1], salji, 1);
                cdDic[1].Dpc.dumpingPropertyList[0].DumpingValue = null;
                cdDic[1].Dpc.dumpingPropertyList[1].DumpingValue = null;
            }
        }
        else
        {
            return;
        }

    }
    public void Code_Singlenode_Method(bool directly, Value value)
    {
        dbc.AddCDtoDictionary("CODE_SINGLENODE", value, cdDic, 2);
        //StreamWriter sw = new StreamWriter("Logfile.txt");
        //sw.WriteLine("Dumping Buffer is Code Singlenode data to Dumping Buffer Converter");
        if (CheckDatasetValues(2))   //proveravam da li dati dataset ima obe vrednosti postavljene
        {
            if (!directly)
            {
                string salji = "";

                if (historicalConv.DatasetAlreadyExist(2))
                    salji = "UPDATE";
                else
                    salji = "ADD";

                SendToHistoricalConverter(cdDic[2], salji, 2);
                cdDic[2].Dpc.dumpingPropertyList[0].DumpingValue = null;
                cdDic[2].Dpc.dumpingPropertyList[1].DumpingValue = null;
            }
        }
        else
        {
            return;
        }

    }
    public void Code_Multiplenode_Method(bool directly, Value value)
    {
        dbc.AddCDtoDictionary("CODE_MULTIPLENODE", value, cdDic, 2);
        //StreamWriter sw = new StreamWriter("Logfile.txt");
        //sw.WriteLine("Dumping Buffer is Code Multiplenode data to Dumping Buffer Converter");
        if (CheckDatasetValues(2))   //proveravam da li dati dataset ima obe vrednosti postavljene
        {
            if (!directly)
            {
                string salji = "";

                if (historicalConv.DatasetAlreadyExist(2))
                    salji = "UPDATE";
                else
                    salji = "ADD";

                SendToHistoricalConverter(cdDic[1], salji, 2);
                cdDic[2].Dpc.dumpingPropertyList[0].DumpingValue = null;
                cdDic[2].Dpc.dumpingPropertyList[1].DumpingValue = null;
            }
        }
        else
        {
            return;
        }

    }
    public void Code_Consumer_Method(bool directly, Value value)
    {
        dbc.AddCDtoDictionary("CODE_CONSUMER", value, cdDic, 3);
        //StreamWriter sw = new StreamWriter("Logfile.txt");
        //sw.WriteLine("Dumping Buffer is Code Consumer data to Dumping Buffer Converter");
        if (CheckDatasetValues(3))   //proveravam da li dati dataset ima obe vrednosti postavljene
        {
            if (!directly)
            {
                string salji = "";

                if (historicalConv.DatasetAlreadyExist(3))
                    salji = "UPDATE";
                else
                    salji = "ADD";

                SendToHistoricalConverter(cdDic[3], salji, 3);
                cdDic[3].Dpc.dumpingPropertyList[0].DumpingValue = null;
                cdDic[3].Dpc.dumpingPropertyList[1].DumpingValue = null;
            }
        }
        else
        {
            return;
        }

    }
    public void Code_Source_Method(bool directly, Value value)
    {
        dbc.AddCDtoDictionary("CODE_SOURCE", value, cdDic, 3);
        //StreamWriter sw = new StreamWriter("Logfile.txt");
        //sw.WriteLine("Dumping Buffer is Code Source data to Dumping Buffer Converter");
        if (CheckDatasetValues(3))   //proveravam da li dati dataset ima obe vrednosti postavljene
        {
            if (!directly)
            {
                string salji = "";

                if (historicalConv.DatasetAlreadyExist(3))
                    salji = "UPDATE";
                else
                    salji = "ADD";

                SendToHistoricalConverter(cdDic[3], salji, 3);
                cdDic[3].Dpc.dumpingPropertyList[0].DumpingValue = null;
                cdDic[3].Dpc.dumpingPropertyList[1].DumpingValue = null;
            }
        }
        else
        {
            return;
        }

    }
    public void Code_Motion_Method(bool directly, Value value)
    {
        dbc.AddCDtoDictionary("CODE_MOTION", value, cdDic, 4);
        //StreamWriter sw = new StreamWriter("Logfile.txt");
        //sw.WriteLine("Dumping Buffer is Code Motion data to Dumping Buffer Converter");
        if (CheckDatasetValues(4))   //proveravam da li dati dataset ima obe vrednosti postavljene
        {
            if (!directly)
            {
                string salji = "";

                if (historicalConv.DatasetAlreadyExist(4))
                    salji = "UPDATE";
                else
                    salji = "ADD";

                SendToHistoricalConverter(cdDic[4], salji, 4);
                cdDic[4].Dpc.dumpingPropertyList[0].DumpingValue = null;
                cdDic[4].Dpc.dumpingPropertyList[1].DumpingValue = null;
            }
        }
        else
        {
            return;
        }

    }
    public void Code_Sensor_Method(bool directly, Value value)
    {
        dbc.AddCDtoDictionary("CODE_SENSOR", value, cdDic, 4);
        //StreamWriter sw = new StreamWriter("Logfile.txt");
        //sw.WriteLine("Dumping Buffer is Code Sensor data to Dumping Buffer Converter");
        if (CheckDatasetValues(4))   //proveravam da li dati dataset ima obe vrednosti postavljene
        {
            if (!directly)
            {
                string salji = "";

                if (historicalConv.DatasetAlreadyExist(4))
                    salji = "UPDATE";
                else
                    salji = "ADD";

                SendToHistoricalConverter(cdDic[4], salji, 4);
                cdDic[4].Dpc.dumpingPropertyList[0].DumpingValue = null;
                cdDic[4].Dpc.dumpingPropertyList[1].DumpingValue = null;
            }
        }
        else
        {
            return;
        }

    }
    public bool CheckDatasetValues(int dataset)
    {
        if (dataset < 0 || dataset > 4)
            throw new ArgumentException("Prosledjeni dataset mora da bude u intervalu 1-5");

        return (cdDic[dataset].Dpc.dumpingPropertyList[0].DumpingValue != null && cdDic[dataset].Dpc.dumpingPropertyList[1].DumpingValue != null);
    }
    public void ClearDeltaCD(DeltaCD dCD)
    {
        if (dCD == null)
            throw new ArgumentNullException("Prosledjena DeltaCD struktura ima vrednost null");

        for (int i = 0; i < 5; i++)
        {
            dCD.AddDic[i].Dpc.dumpingPropertyList[0].DumpingValue = null;
            dCD.AddDic[i].Dpc.dumpingPropertyList[1].DumpingValue = null;
            dCD.AddDic[i].Dpc.dumpingPropertyList[0].Code = null;
            dCD.AddDic[i].Dpc.dumpingPropertyList[1].Code = null;
            dCD.UpdateDic[i].Dpc.dumpingPropertyList[0].DumpingValue = null;
            dCD.UpdateDic[i].Dpc.dumpingPropertyList[1].DumpingValue = null;
            dCD.UpdateDic[i].Dpc.dumpingPropertyList[0].Code = null;
            dCD.UpdateDic[i].Dpc.dumpingPropertyList[1].Code = null;
            dCD.RemoveDic[i].Dpc.dumpingPropertyList[0].DumpingValue = null;
            dCD.RemoveDic[i].Dpc.dumpingPropertyList[1].DumpingValue = null;
            dCD.RemoveDic[i].Dpc.dumpingPropertyList[0].Code = null;
            dCD.RemoveDic[i].Dpc.dumpingPropertyList[1].Code = null;
        }

        deltaCD.TransactionID += 1;
    }
    public void FillDeltaCD(DeltaCD dCD, string type, CollectionDescription cd, int dataset)
    {
        if (dCD == null || cd == null)
            throw new ArgumentNullException("Prosledjeni argumenti ne smeju imati vrednost null.");
        if (dataset < 0 || dataset > 4)
            throw new ArgumentException("Prosledjeni dataset mora biti u intervalu 1-5.");
        if (type != "ADD" && type != "UPDATE" && type != "REMOVE")
            throw new ArgumentException("Prosledjeni argumenti moraju da se proslede DeltaCD strukturi u jednoj od njene 3 CollectonDescription strukture");
        switch (type)
        {
            case "ADD":
                {
                    deltaCD.AddDic[dataset].Dataset = dataset;
                    deltaCD.AddDic[dataset].ID = cd.ID;
                    deltaCD.AddDic[dataset].Dpc = cd.Dpc;
                }; break;
            case "UPDATE":
                {
                    deltaCD.UpdateDic[dataset].Dataset = dataset;
                    deltaCD.UpdateDic[dataset].ID = cd.ID;
                    deltaCD.UpdateDic[dataset].Dpc = cd.Dpc;
                }
                break;
            case "REMOVE":
                {
                    deltaCD.RemoveDic[dataset].Dataset = cd.Dataset;
                    deltaCD.RemoveDic[dataset].ID = cd.ID;
                    deltaCD.RemoveDic[dataset].Dpc = cd.Dpc;
                }
                break;
        }
    }

















}//end DumpingBuffer